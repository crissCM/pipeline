{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["asaData","creator","note","amount","decimals","assetName","unitName","myAlgoWallet","Pipeline","init","main","mynet","tealNames","tealContracts","a","i","length","name","fetch","data","text","program","data2","clearProgram","data3","front","App","props","fetchBalance","balance","state","myAddress","then","setState","handleConnect","connect","console","log","handleSend","send","txID","createAsa","document","getElementById","value","switchConnector","event","pipeConnector","target","deploy","permissioned","checked","modifyTeal","getParams","lastRound","deployTeal","delete","deleteApp","optIn","args","push","vote","appId","ASA","getAppCreator","appCallWithTxn","undefined","appCall","assetId","replacements","replace","checkVote","readGlobalState","keyIndex","window","atob","key","alert","uint","net","getContracts","this","onChange","onClick","id","type","placeholder","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.36673f2e.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport Pipeline from '@pipeline-ui-2/pipeline'; //change to import Pipeline from 'Pipeline for realtime editing Pipeline index.js, and dependency to: \"Pipeline\": \"file:..\",\r\n\r\nconst asaData = {\r\n  creator: \"\",\r\n  note: \"Hello\",\r\n  amount: 2,\r\n  decimals: 0,\r\n  assetName: \"AnotherNft\",\r\n  unitName: \"NFTA\"\r\n}\r\n\r\n//change recipient address before sending transaction\r\nconst recipient = \"LMKFQIPL3VQCZGGFK4WZ7FPCQWLNBTJQ3UWSTA7D7QZSPJTZQKTDVT7WG4\";\r\n\r\nconst myAlgoWallet = Pipeline.init();\r\n\r\n//amount in micro Algos\r\nconst amount = 0;\r\n\r\nconst note = \"test note\";\r\n\r\n//0 = Algorand, otherwise index number of asset\r\nconst index = 0;\r\n\r\n//set to false to switch to TestNet\r\nPipeline.main = true;\r\n\r\nvar mynet = (Pipeline.main) ? \"MainNet\" : \"TestNet\";\r\n\r\nconst tealNames = [\"Permissionless Voting\", \"Permissioned Voting\"]\r\n\r\nconst tealContracts = {\r\n  \"Permissioned Voting\": {},\r\n  \"Permissionless Voting\": {}\r\n}\r\n\r\nasync function getContracts() {\r\n  for (let i = 0; i < tealNames.length; i++) {\r\n    let name = tealNames[i]\r\n    let data = await fetch(\"teal/\" + name + \".txt\")\r\n    tealContracts[name].program = await data.text()\r\n    let data2 = await fetch(\"teal/\" + name + \" clear.txt\")\r\n    tealContracts[name].clearProgram = await data2.text()\r\n    let data3 = await fetch(\"teal/\" + name + \" front.txt\")\r\n    tealContracts[name].front = await data3.text()\r\n  }\r\n}\r\n\r\nclass App extends Component {\r\n\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      net: mynet,\r\n      txID: \"\",\r\n      myAddress: \"\",\r\n      balance: 0\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    getContracts()\r\n  }\r\n\r\n  fetchBalance = () => {\r\n    Pipeline.balance(this.state.myAddress).then(\r\n      data => {\r\n        this.setState({ balance: data });\r\n      }\r\n    );\r\n  }\r\n\r\n  handleConnect = () => {\r\n    Pipeline.connect(myAlgoWallet).then(\r\n      data => {\r\n        this.setState({ myAddress: data });\r\n        asaData.creator = data\r\n        console.log(asaData)\r\n      }\r\n    );\r\n  }\r\n\r\n  handleSend = () => {\r\n    Pipeline.send(recipient, amount, note, this.state.myAddress, myAlgoWallet, index).then(\r\n      data => {\r\n        this.setState({ txID: data });\r\n      }\r\n    );\r\n  }\r\n\r\n  createAsa = () => {\r\n    Pipeline.createAsa(asaData).then(data => {\r\n      document.getElementById(\"assetId\").value = data\r\n    })\r\n  }\r\n\r\n  switchConnector = (event) => {\r\n    Pipeline.pipeConnector = event.target.value\r\n    console.log(Pipeline.pipeConnector)\r\n  }\r\n\r\n  deploy = async () => {\r\n    let permissioned = document.getElementById(\"check\").checked\r\n    if (permissioned) {\r\n      this.modifyTeal()\r\n    }\r\n    let name = permissioned ? \"Permissioned Voting\" : \"Permissionless Voting\"\r\n\r\n    let lastRound = await Pipeline.getParams()\r\n    lastRound = lastRound[\"last-round\"]\r\n\r\n    Pipeline.deployTeal(tealContracts[name].program, tealContracts[name].clearProgram, [1, 1, 0, 6], [lastRound, lastRound + 10000, lastRound, lastRound + 10000]).then(data => { document.getElementById(\"appid\").value = data })\r\n  }\r\n\r\n  delete = async () => {\r\n    Pipeline.deleteApp(document.getElementById(\"appid\").value).then(data => {\r\n      this.setState({ txID: data })\r\n    })\r\n  }\r\n\r\n  optIn = async () => {\r\n    let args = []\r\n    if (document.getElementById(\"check\").checked) { args.push(\"register\") }\r\n    Pipeline.optIn(document.getElementById(\"appid\").value, args).then(data => { this.setState({ txID: data }) })\r\n  }\r\n\r\n  vote = async () => {\r\n    if (!document.getElementById(\"check\").checked) {\r\n      Pipeline.appCall(document.getElementById(\"appid\").value, [\"vote\", \"candidateb\"]).then(\r\n        data => {\r\n          this.setState({ txID: data })\r\n        }\r\n      )\r\n    }\r\n    else {\r\n\r\n      let appId = document.getElementById(\"appid\").value\r\n      let ASA = document.getElementById(\"assetId\").value\r\n\r\n      Pipeline.getAppCreator(appId).then(\r\n        data => {\r\n          Pipeline.appCallWithTxn(appId,\r\n            [\"vote\", \"candidateb\"], data, 1, undefined, ASA\r\n          ).then(data => { this.setState({ txID: data }) })\r\n        }\r\n      )\r\n    }\r\n  }\r\n\r\n  modifyTeal = () => {\r\n    let assetId = document.getElementById(\"assetId\").value\r\n    let search1 = \"// hard-coded assetid\\nint 2\";\r\n    let search2 = \"// hard coded and should be changed\\nint 2\"\r\n    let replacements = [search1, search2]\r\n\r\n    for (let i = 0; i < 2; i++) {\r\n      tealContracts[\"Permissioned Voting\"].program = tealContracts[\"Permissioned Voting\"].program.replace(replacements[i], \"// hard-coded assetid\\nint \" + assetId)\r\n      console.log(tealContracts[\"Permissioned Voting\"].program)\r\n\r\n    }\r\n  }\r\n\r\n  checkVote = async () => {\r\n    Pipeline.readGlobalState(document.getElementById(\"appid\").value).then(\r\n      data => {\r\n        let keyIndex = \"\"\r\n        for (let i = 0; i < data.length; i++) {\r\n          let thisKey = window.atob(data[i].key)\r\n          if (thisKey === \"candidateb\") {\r\n            keyIndex = i;\r\n          }\r\n        }\r\n        if (keyIndex != \"\") {\r\n          alert(\"Candidateb Votes: \" + data[keyIndex].value.uint)\r\n        }\r\n        else {\r\n          alert(\"No votes for candidate b cast yet\")\r\n        }\r\n      })\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h1>Edit the code to make things happen!</h1>\r\n        <h2>{this.state.net}</h2>\r\n        <select onChange={this.switchConnector}><option>myAlgoWallet</option><option>WalletConnect</option><option>AlgoSigner</option></select><br></br>\r\n\r\n        <button onClick={this.handleConnect}>Click to Connect</button><br></br>\r\n        <button onClick={this.handleSend}>Click to Send Transaction</button><br></br>\r\n        <button onClick={this.fetchBalance}>Click to check balance</button><br></br>\r\n\r\n        <h1>ASA's and Contracts</h1>\r\n        <button onClick={this.createAsa}>Click to Create an Asset</button><br></br>\r\n        <input id=\"assetId\" type=\"number\" placeholder=\"assetId\"></input>\r\n        <br></br><br></br>\r\n        Permissioned?<input id=\"check\" type=\"checkbox\" ></input><br></br>\r\n        <button onClick={this.deploy}>Deploy Contract</button>\r\n        <button onClick={this.delete}>Delete App</button>\r\n        <button onClick={this.optIn}>Opt In</button>\r\n        <button onClick={this.vote}>Vote for Candidate B</button>\r\n        <button onClick={this.checkVote}>Check Vote</button>\r\n        <input placeholder=\"App Id\" id=\"appid\" type=\"number\"></input>\r\n        <p>{\"Connected Address: \" + this.state.myAddress}</p><br></br>\r\n        <p>{\"Balance: \" + this.state.balance}</p><br></br>\r\n        <p>{\"Transaction ID: \" + this.state.txID}</p><br></br>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}